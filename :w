<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Bootstrap Form Builder</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="">
    <meta name="author" content="">

    <link href="assets/css/bootstrap.css" rel="stylesheet">
    <style>
      body {
        padding-top: 60px; /* 60px to make the container go all the way to the bottom of the topbar */
        padding-bottom: 10px;
      }

      #target{
        min-height: 200px;
        border: 1px solid #ccc;
        padding: 5px;
      }

      #target .component{
        border: 1px solid #fff;
      }

      #temp{
        width: 500px;
        background: white;
        border: 1px dotted #ccc;
        border-radius: 10px;
      }

      .popover-content form .btn{
        margin-right: 10px
      }

      #source{
        min-height: 500px;
      }

      /* Popovers now are appended to their parent rather
         than to the body/main document as they once were. 
         We need to over-ride some inherited stuff.. */
      form .popover .controls {
        margin-left: 0;
      }

      form .popover .control-label {
        text-align: left;
      }

      form .popover form {
        width: 224px;
      }

      /* Drag & Drop */
      #build .control-group{
        border-top: 1px solid #fff;
        border-bottom: 1px solid #fff;
      }

      #build .control-group.dropzone {
        border-top: 1px solid #7ae;
      }

      #build .control-group.dropzone.bottom{                 
        border-top: 1px solid #fff;
        border-bottom: 1px solid #7ae;
      }


    </style>
    <link href="assets/css/bootstrap-responsive.css" rel="stylesheet">

    <!--[if lt IE 9]>
    <script src="//html5shim.googlecode.com/svn/trunk/html5.js"></script>
    <![endif]-->

    <link rel="shortcut icon" href="images/favicon.ico">
    <link rel="apple-touch-icon" href="images/apple-touch-icon.png">
    <link rel="apple-touch-icon" sizes="72x72" href="images/apple-touch-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="114x114" href="images/apple-touch-icon-114x114.png">
  </head>

  <body>

    <div class="navbar navbar-fixed-top">
      <div class="navbar-inner">
        <div class="container">
          <a class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </a>
          <a class="brand" href="#">Bootstrap Form Builder</a>
        </div>
      </div>
    </div>
    <div class="container">
      <div class="row clearfix">

        <!-- Building Form. -->
        <div class="span6">
          <div class="clearfix">
            <h2>Your Form</h2>
            <hr>
            <div id="build">
              <form id="target" class="form-horizontal">
                <fieldset>
                </fieldset>
              </form>
            </div>
          </div>
        </div>
        <!-- / Building Form. -->

        <!-- Components -->
        <div class="span6">
          <h2>Drag & Drop components</h2>
          <hr>
          <div class="tabbable">
            <ul class="nav nav-tabs" id="navtab">
              <!-- Tab nav -->
            </ul>
            <form class="form-horizontal" id="components">
              <fieldset>
                <div class="tab-content">
                  <!-- Tabs of snippets go here -->
                </div>
              </fieldset>
            </form>
          </div>
        </div>
        <!-- / Components -->

      </div>

      <div class="row clearfix">
        <div class="span12">
          <hr>
          By Adam Moore (<a href="http://twitter.com/minikomi" >@minikomi</a>).<br/>
          Source on (<a href="https://github.com/minikomi/Bootstrap-Form-Builder" >Github</a>).
        </div>
      </div>

    </div> <!-- /container -->

    <!-- general js -->
    <script src="assets/js/jquery.js"></script>
    <script src="assets/js/bootstrap.js"></script>
    <script src="assets/js/bootstrap-tab.js"></script>

    <!-- backbone -->
    <script src="assets/appjs/underscore-min.js" type="text/javascript"></script>
    <script src="assets/appjs/backbone.js" type="text/javascript"></script>

    <!-- [templates] -->

    <!-- Popover -->
    <script type="text/html" id="popover-input">
      <label class='control-label'> <%= label %> </label> <input class='input-large' type='text' name='<%= id %>' id='<%= id %>' value ='<%= value %>' />
    </script>

    <script type="text/html" id="popover-textarea">
      <label class='control-label'> <%= label %> </label>
      <textarea style='min-height: 200px' id='<%= id %>'>
        <% for ( var i = 0; i < value.length ; i++ ) { %><%= value[i] + "\n" %><% } %>
      </textarea>
    </script>

    <script type="text/html" id="popover-main">
      <form class='form'>
        <div class='controls'>
          <% _.reduce(items, function(str, v, k){  %>
            <% v["id"] = k; %>
            <%= popoverItemTemplates[v["type"]](v) %>
            <% }, "") %>
          <hr/>
          <button class='btn btn-info'>Save</button><button class='btn btn-danger'>Cancel</button>
        </div>
      </form>
    </script>

    <!-- Tab  -->
    <script type="text/html" id="tab-nav">
      <li><a href="#<%= id %>" data-toggle="tab"><%= title %></a></li>
    </script>

    <!-- snippet -->
    <script type="text/html" id="snippet-formname">
      <legend data-valtype="text"><%= name %></legend>
    </script>

    <script type="text/html" id="snippet-textinput">
      <!-- Text input-->
      <label class="control-label" for="input01" data-valtype='label'><%= label %></label>
      <div class="controls">
        <input type="text" placeholder="<%= placeholder %>" class="input-xlarge" data-valtype="placeholder" >
        <p class="help-block" data-valtype='help'><%= helptext %></p>
      </div>
    </script>

    <script type="text/html" id="snippet-search">
      <!-- Search input-->
      <label class="control-label" data-valtype="label"><%= label %></label>
      <div class="controls">
        <input type="text" placeholder="<%= placeholder %>" class="input-xlarge search-query" data-valtype="placeholder">
        <p class="help-block" data-valtype="help"><%= helptext %></p>
      </div>
    </script>

    <script type="text/html" id="snippet-prepend">
      <!-- Prepended text-->
      <label class="control-label" data-valtype="label"><%= label %></label>
      <div class="controls">
        <div class="input-prepend">
          <span class="add-on" data-valtype="prepend"><%= prepend %></span>
          <input class="span2" placeholder="<%= placeholder %>" type="text" data-valtype="placeholder">
        </div>
        <p class="help-block" data-valtype="help"><%= helptext %></p>
      </div>
    </script>

    <script>
      // Set up templates
      var popoverTemplate         = _.template($("#popover-main").html());

      var popoverItemTemplates    = {
        "text" :   _.template($("#popover-input").html()),
        "textarea" :  _.template($("#popover-textarea").html())
      }

      var tabnavTemplate         = _.template($("#tab-nav").html());

      // Snippet Model / View
      var Snippet  = Backbone.Model.extend({});

      var SnippetView = Backbone.View.extend({
        tagName: "div",
        className: "control-group",
        initialize: function(){ this.template = _.template($("#snippet-"+ mungText(this.model.get("title"))).html())},
        render: function(){
          return this.$el.html(this.template(
          _.reduce(this.model.toJSON(), function(o, v, k){
            if (k !== "type" || k !== "title") {o[k] = v["value"];}
            return o;
          },{})
          )).attr({
            "data-content"   : popoverTemplate({"items" : _.omit(this.model.toJSON(), "title")})
            , "data-title"   : this.model.get("title")
            , "data-trigger" : "manual"
            , "data-html"    : true
          }).popover()
        }
        , events:{
          "mousedown" : "mouseDownHandler"
        }
        , mouseDownHandler: function(mouseEvent){
          mouseEvent.preventDefault();                                             
          //hide all popovers
          $(".popover").hide();

          $temp = $("<form class='form-horizontal span6' id='temp'>").append(new TempSnippetView({model: this.model.clone()}).render());
          centerOnMouse($temp, mouseEvent);
          $("body").append($temp).show();
          $("body").on("mousemove", function(mouseEvent){centerOnMouse($temp, mouseEvent);});
        }
      });

      var MyformSnippetView = SnippetView.extend({
        events: {
          "mousedown" : "mouseDownHandler"
          "mouseover" : "function(){console.log('hi')}"
        }
        , mouseDownHandler : function(mouseEvent){
          console.log("moo");
        }
      })

      var TempSnippetView = SnippetView.extend({
        events:{
          "mouseup" : "mouseUpHandler",
        }  
        , mouseUpHandler: function(mouseEvent){
          if($(".dropzone").length > 0){
            myFormCollection.add(this.model)
          }
          $("#build .control-group").removeClass("dropzone bottom")
          $temp.remove();
          $("body").off("mousemove");
        }
      })

      var $build = $("#build");
      var centerOnMouse = function($temp, mouseEvent){
        //mouse centering
        var mouseX = mouseEvent.pageX;
        var mouseY = mouseEvent.pageY;
        var halfHeight = $temp.height()/2;
        var halfWidth  = $temp.width()/2;

        var buildPosition = $build.position();
        var $myFormBits = $("#build form .control-group");

        $temp.css({"position" : "absolute",
          "top"       : mouseY - ($temp.height()/2) + "px",
          "left"      : mouseX - ($temp.width()/2) + "px",
          "opacity"   : "0.75",
          "box-shadow": "0px 0px 15px #666"})
        
        //drop position indication
        $myFormBits.removeClass("dropzone bottom");
        if (
        mouseX > buildPosition.left &&
        mouseX < buildPosition.left + $build.width() + $temp.width()/2 &&
        mouseY > buildPosition.top  &&
        mouseY < buildPosition.top + $build.height() + $temp.height()/2
        ){
          var tops = $.grep($myFormBits, function(e){
            return ($(e).position().top -  mouseY + halfHeight > 0 && $(e).attr("data-title") !== "Form Name");
          });

          if(tops.length > 0){
            $(tops[0]).addClass("dropzone")
            return;
          } else if ($myFormBits.length > 0) {
            $($myFormBits[$myFormBits.length - 1]).addClass("dropzone bottom");
            return;
          } else {
            $("legend").addClass("dropzone bottom");
            return;
          }
        }
      }

      //Snippet Collection
      var SnippetsCollection = Backbone.Collection.extend({
        model: Snippet
        , renderAll: function(){
          return this.map(function(snippet){
            return new SnippetView({model: snippet}).render();
          });
        }
      });

      //Snippet Collection for MyForm
      var MyformSnippetsCollection = SnippetsCollection.extend({
        model: Snippet
        , renderAll: function(){
          return this.map(function(snippet){
            return new MyformSnippetView({model: snippet}).render();
          });
        }
      });

      // My Form View
      var MyForm = Backbone.View.extend({
        tagName: "fieldset"
        , render: function(){
          //Render Snippet Views
          this.$el.empty();
          var that = this;
          _.each(this.collection.renderAll(), function(snippet){
            that.$el.append(snippet);
          });
          $("#build form").html(this.$el);
        }
        , initialize: function(){        
          this.collection.on('add', this.render, this);
          this.collection.on('remove', this.render, this);
          this.collection.on('change', this.render, this);
          this.render();
        }
      })

      // Tab Collection / View
      var Tab = Backbone.View.extend({
        tagName: "div"
        , className: "tab-pane"
        , render: function(){            
          //Render Snippet Views
          var that = this;
          _.each(this.collection.renderAll(), function(snippet){
           that.$el.append(snippet);
          });
          this.$el.attr("id", this.id)

          //render & append nav
          $(".nav.nav-tabs").append(tabnavTemplate({title: this._title, id: this.id}))

          //append tab pane
          this.$el.appendTo(".tab-content");
          this.delegateEvents();
        }

        // Set title text for nav.
        , setTitle: function(title){
          this._title = title;
          this.id     = mungText(title)
        }
      });

      // General App View
      var SnippetApp = Backbone.View.extend({



      });

      // Convinience functions
      var tabMaker = function(title, snippetCollection){
        var tab = new Tab({collection : snippetCollection})
        tab.setTitle(title);
        tab.render();
      }
      var mungText = function(str){
       return str.toLowerCase().replace(/\W/g,'')
      }
      
      //--- App Setup ---//

      // Create Snippets

      // Form Name
      var formName = new Snippet({
        "title" : "Form Name"
        , "name"       : {"label"    : "Form Name"  , "type" : "text" , "value" : "Form Name"}
      });

      //Text Input Snippets
      var textInput = new Snippet({
        "title" : "Text Input"
        , "label"       : {"label"    : "Label Text"  , "type" : "text" , "value" : "label"}
        , "prepend"     : {"label"    : "Prepend"     , "type" : "text" , "value" : "prepend"}
        , "placeholder" : {"label"    : "Placeholder" , "type" : "text" , "value" : "placeholder"}
        , "helptext"    : {"label"    : "Help Text"   , "type" : "text" , "value" : "help"}
      });

      // Bundle snippets for tabs
      var textInputSnippets = new SnippetsCollection([
        textInput
      ]);
      // Make tabs
      tabMaker("Text Inputs", textInputSnippets)

      //Make the first tab active!
      $(".tab-pane").first().addClass("active");
      $("ul.nav li").first().addClass("active");

      myFormCollection = new MyformSnippetsCollection([formName]);
      //Set up form with title element.
      var myForm = new MyForm({
        collection: myFormCollection
      })

    </script>
  </body>
</html>
